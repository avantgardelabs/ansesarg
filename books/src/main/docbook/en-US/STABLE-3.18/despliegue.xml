<?xml version='1.0' encoding='utf-8' ?>
<chapter version="5.0"
	xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd http://www.w3.org/1999/xlink http://www.docbook.org/xml/5.0/xsd/xlink.xsd"
	xml:base="./" xmlns="http://docbook.org/ns/docbook" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xlink="http://www.w3.org/1999/xlink"
	xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:ns="http://docbook.org/ns/docbook">
	<title>Despliegue y puesta en funcionamiento</title>

	<section>
		<title>Compilacion</title>
		<para>
			Toda la informacion aqui vertida puede ser consultada en la
			seccion de bibligrafia del presente documento como asi tambien las
			versiones de los compiladores y ensambladores.
		</para>
		<para>
			Todas las herramientas utilizadas pertenecen a la comunidad de
			codigo abierto y responden a la version STABLE de las mismas. Las
			versiones presentadas responden a las minimas y necesarias. Versiones
			previas y/o posteriores no fueron verificadas
		</para>

		<para>
			La primera tarea es descargarse la version 3.18 del codigo
			fuente. La misma se encuentra en
			https://github.com/avantgardelabs/ansesarg.git Para ello debe
			ejecutar el siguiente comando:
		</para>
		<para>
			<ns:command>git clone https://github.com/avantgardelabs/ansesarg.git
			</ns:command>
		</para>
		<para>Ese comando descargara una copia del codigo fuente en la PC
			local. El siguiente paso es realizar la compilacion. Para ello se
			debe ejecutar el siguiente comando mvn
		</para>
		<para>
			<ns:command>mvn clean install -Dmaven.test.skip </ns:command>
		</para>
		<para>Ese comando compilara todos los submodulos y procedera a
			instalar en el repo local todas las dependencias necesarias. El
			producto final de la compilacion es un archivo war que se alojara en
			la carpeta target. Este archivo luego es desplegado en el conteiner
			(o server web).
		</para>
		<ns:warning>
			<title>Cache</title>
			<para>Al momento de realizar la compilacion, mvn intentara conectarse
				a los repositorios externos para poder bajar las dependencias. En
				muchas configuraciones de red los proxy puede bloquear este tipo de
				peticiones. En cuyo caso contacte al administrador de su red para
				que le proporcione los privilegios necesarios o bien pueda
				proporcionarle un cache (ej. archiva)
			</para>
		</ns:warning>
		<para>El siguiente paso es opcional. La documentacion de proyecto se
			encuentra con el codigo fuente (como debe ser). En caso que se quiera
			tener un documento pdf o bien en HTML se debe ingresar a la carpeta
			books y ejecutar el siguiente comando:
		</para>
		<para>
			<ns:command>mvn site</ns:command>
		</para>
		<para>Dicho comando generara dentro de la carpeta target una carpeta
			llamada docbook->publish->en-US alli se encuentran dos carpetas. Una
			llamada html y otra llamada html_single. La primera refiere a la
			documentacion en diferentes paginas y la segunda en una unica pagina
			html
		</para>
		<para>Opcionalmente se puede generar un PDF realizando
			modificaciones/actualizaciones en el archivo pom.xml del proyecto
			book
		</para>

	</section>

	<section>
		<title>Configuracion del servidor</title>
		<para>
			A continuacion se describira los elementos necesarios y los
			procedimientos para poder configurar el servidor WEB que permite
			desplegar la aplicacion.
		</para>
		<para>Los pasos a seguir para configurar el servidor de pueden
			resumir
			en los siguientes:
		</para>
		<ns:orderedlist>
			<ns:listitem>
				<para>Instalar Java (Runtime y compilador)</para>
			</ns:listitem>
			<ns:listitem>
				<para>Descomprimir la carpeta del servidor jboss (Version
					jboss-eap-4.3.0.GA_CP06, la cual fue proporcionada por RedHat)
				</para>
			</ns:listitem>
			<ns:listitem>
				<para>Declarar la variable de ambiente JBOSS_HOME indicando donde
					fue descomprimido jboss
				</para>
			</ns:listitem>
			<ns:listitem>
				<para>Otorgar permisos de ejecucion a la carpeta $JBOSS_HOME/bin
				</para>
			</ns:listitem>
			<ns:listitem>
				<para>Copiar los datasources asistente_reglas-ds.xml y
					asistente_reglas_mmx-ds.xml que se proporcionan de ejemplo dentro
					de la carpeta $JBOSS_HOME/server/INSTANCIA/deploy. Recordar de
					realizar los cambios necesarios de usuario clave y url.
				</para>
			</ns:listitem>
			<ns:listitem>
				<para>Copiar el archivo asistente_reglas.properties en la carpeta
					JBOSS_HOME/server/INSTANCIA/conf
				</para>
			</ns:listitem>

		</ns:orderedlist>


		<section>
			<title>Frameworks</title>
			<section>
				<title>Capa de presentacion</title>
				<para>La capa de presentacion de la aplicacion posee los siguientes
					componentes:
				</para>
				<ns:itemizedlist>
					<ns:listitem>
						<para>jsf 1.2_02</para>
					</ns:listitem>
					<ns:listitem>
						<para>RichFaces 3.3.0-GA</para>
					</ns:listitem>
					<ns:listitem>
						<para>Seam 2.0.2-FP</para>
					</ns:listitem>
				</ns:itemizedlist>
			</section>
			<section>
				<title>Capa de persistencia</title>
				<para>La capa de persistencia trabaja sobre un ORM con
					implementacion en:
				</para>
				<ns:itemizedlist>
					<ns:listitem>
						<para>hibernate 3.3.2-GA</para>
					</ns:listitem>
				</ns:itemizedlist>
				<para>Esto significa que todas las invocaciones a la BBDD se
					realizan mediante un conector de JDBC y el acceso a los datos se
					realiza mendiante este ORM.
				</para>
				<para>En la aplicacion no existen llamadas nativas (queery nativos)
					por lo cual la portabilidad esta garantizada por el mismo ORM.
				</para>
				<para>La administracion de las transacciones esta a cargo de seam
					con su implementacion de EntityManager
				</para>
			</section>
			<section>
				<title>Capa de Reglas</title>
				<para>Como cualidad importante, el ARG posee una implementacion de
					BRMS basada en drools. Estas librerias por cuestiones de
					performance integran el WAR final
				</para>
			</section>
		</section>

		<section>
			<title>Librerias</title>
			<para>Por definicion, el ARG no incorpora librerias (empaqueta) que
				pertencen a los frameworks y estandares anteriormente mencionados.
				Por lo cual, el resto de las librerias deben estar copiadas dentro
				de la carpeta JBOSS_HOME/server/INSTANCIA/lib
			</para>
			<para>A continuacion se hace una enumeracion de las librerias que son
				empaquetadas dentro del WAR
			</para>

		</section>

		<section>
			<title>Configuracion de BBDD</title>
			<para>Como se menciono anteriormente, el acceso a los datos se
				realiza mediante un ORM (con implementacion en Hibernate).
			</para>
			<para>ARG cuenta con dos acceso a datos: Uno para brindar sustento a
				el funcionamiento propio y otro para la funcionalidad de simulacion.
			</para>
			<para>Para ello se proveen dos archivos de similares caracteristicas
			</para>
			<ns:itemizedlist>
				<ns:listitem>
					<para>asistente_reglas-ds.xml el cual proporciona las credenciales
						para acceder a los datos propios de la aplicacion ARG y
					</para>
				</ns:listitem>
				<ns:listitem>
					<para>asistente_reglas_mmx-ds.xml el cual proporciona las
						credenciales
						para acceder a los datos del simulador.
					</para>
				</ns:listitem>
			</ns:itemizedlist>

			<ns:important>
				<title>Librerias del motor de BBDD</title>
				<para>El ARG no proporciona ninguna libreria de acceso a datos y las
					mismas deben ser incorporadas dentro de
					JBOSS_HOME/server/prissa/lib
				</para>
				<para>Si la libreria del conector JDBC no se encuentra en dicha
					carpeta, al intentar levantar la instancia devolvera un error de
					ClassNotFound
				</para>
			</ns:important>
		</section>

		<section>
			<title>Configuracion CUSTOM</title>
			<para>El ultimo paso es realizar los ajustes necesarios en un archivo
				de configuracion. Este archivo es asistente_reglas.properties y debe
				recidir en JBOSS_HOME/server/INSTANCIA/conf
			</para>
			<para>En la presente version solo tiene dos atributos, uno que hace
				referencia a la carpeta donde se depositaran las reglas generadas y
				otro en donde residiran los agentes generados.
			</para>
		</section>

		<para>Una vez finalizado todos los pasos mencionados falta un paso
			mas. Tomar el archivo WAR generado en el proceso de compilacion y
			pegarlo en JBOSS_HOME/server/INSTANCE/deploy
		</para>
		<para>Finalmente solo resta iniciar el JBOSS SERVER y acceder a la
			aplicacion desde: http://DIRECION:PUERTO/asistente_reglas</para>

		<ns:bibliography>
			<table>
				<ns:thead>
					<td>Producto</td>
					<td>Version</td>
					<td>link</td>
				</ns:thead>

				<tr>
					<td>git </td>
					<td>1.7</td>
					<td>
						<ns:link>http://www.git-scm.com</ns:link>
					</td>
				</tr>

				<tr>
					<td>Java</td>
					<td>javac 1.6.0_37</td>
					<td>
						<ns:link>http://www.oracle.com/java</ns:link>
					</td>
				</tr>

				<tr>
					<td>maven</td>
					<td>2.0.2</td>
					<td>
						<ns:link>http://maven.apache.org</ns:link>
					</td>
				</tr>

				<tr>
					<td>Jboss Server</td>
					<td>eap-4.3.0.GA_CP06</td>
					<td>
						<ns:link>Provisto por RedHat</ns:link>
					</td>
				</tr>

				<tr>
					<td>BRMS</td>
					<td>5.0.2.BRMS</td>
					<td>
						<ns:link>Provisto por RedHat</ns:link>
					</td>
				</tr>
				<tr>
					<td>Seam</td>
					<td>2.0.2_FP</td>
					<td>
						<ns:link>Provisto por RedHat</ns:link>
					</td>
				</tr>



			</table>
		</ns:bibliography>
	</section>




</chapter>
